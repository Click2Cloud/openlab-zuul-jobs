- hosts: all
  become: yes
  tasks:

    - shell:
        cmd: |
          set -e
          set -x
          cat << 'EOF' >>"/tmp/dg-local.conf"
          [[local|localrc]]
          # Enable ssl
          ENABLED_SERVICES+=,tls-proxy
          NETWORK_GATEWAY=10.0.0.1

          EOF
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - shell:
        cmd: |
          set -e
          set -x
          export PYTHONUNBUFFERED=true
          export GIT_BASE=https://github.com
          export DEVSTACK_GATE_FIXED_RANGE=10.0.0.0/20
          export OVERRIDE_ZUUL_BRANCH=stable/ocata
          cp devstack-gate/devstack-vm-gate-wrap.sh ./safe-devstack-vm-gate-wrap.sh
          ./safe-devstack-vm-gate-wrap.sh
        executable: /bin/bash
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - shell:
        cmd: |
          set -e
          set -x
          wget -c https://storage.googleapis.com/golang/go1.9.linux-amd64.tar.gz
          sudo tar -C /usr/local/ -xvzf go1.9.linux-amd64.tar.gz

          # Install env variables
          export GOPATH={{ ansible_user_dir }}
          mkdir -p $GOPATH/{bin,pkg}
          export PATH=$PATH:$GOPATH/bin:/usr/local/go/bin
          export GOBIN=$GOPATH/bin

          # Prep the testing environment by creating the required testing resources and environment variables
          pushd /opt/stack/new/devstack
          source openrc admin admin
          nova flavor-create m1.acctest 99 512 5 1 --ephemeral 10
          nova flavor-create m1.resize 98 512 6 1 --ephemeral 10
          _NETWORK_ID=$(openstack network show private -c id -f value)
          _EXTGW_ID=$(openstack network show public -c id -f value)
          _IMAGE=$(openstack image list | grep -i cirros | head -n 1)
          _IMAGE_ID=$(echo $_IMAGE | awk -F\| '{print $2}' | tr -d ' ')
          _IMAGE_NAME=$(echo $_IMAGE | awk -F\| '{print $3}' | tr -d ' ')
          echo export OS_IMAGE_NAME="$_IMAGE_NAME" >> openrc
          echo export OS_IMAGE_ID="$_IMAGE_ID" >> openrc
          echo export OS_NETWORK_ID=$_NETWORK_ID >> openrc
          echo export OS_EXTGW_ID=$_EXTGW_ID >> openrc
          echo export OS_POOL_NAME="public" >> openrc
          echo export OS_FLAVOR_ID=99 >> openrc
          echo export OS_FLAVOR_ID_RESIZE=98 >> openrc
          echo export OS_SHARE_NETWORK_ID=foobar >> openrc
          source openrc demo demo
          popd

          # Run acc test
          if [[ ! -d $GOPATH/src/github.com/terraform-providers/terraform-provider-openstack/ ]]; then
              echo "Warnning: this is a temporary workaround because this job is not triggered from official git repo."
              mkdir -p $GOPATH/src/github.com/terraform-providers/
              cp -r $GOPATH/src/github.com/theopenlab/terraform-provider-openstack  $GOPATH/src/github.com/terraform-providers/
              cd $GOPATH/src/github.com/terraform-providers/terraform-provider-openstack
          fi

          TEST_RESULTS_TXT='{{ ansible_user_dir }}/workspace/test_results.txt'
          TEST_RESULTS_XML='{{ ansible_user_dir }}/workspace/test_results.xml'
          TEST_RESULTS_HTML='{{ ansible_user_dir }}/workspace/test_results.html'

          # Run except the DNS/FW/LB test 100 testcases at a time
          testcases=`go test ./openstack/ -v -list 'Acc'`
          testcases=`echo "$testcases" | sed '$d' | grep -v -e DNS -e FW -e LB`
          echo "$testcases" | xargs -t -n100 sh -c 'TF_ACC=1 go test ./openstack -v -timeout 120m -run $(echo "$@" | tr " " "|")' argv0 2>&1 | tee -a $TEST_RESULTS_TXT

          go get -u github.com/jstemmer/go-junit-report
          go-junit-report < $TEST_RESULTS_TXT > $TEST_RESULTS_XML
          apt install npm -y > /dev/null
          npm install -g npm > /dev/null
          npm install -g n > /dev/null
          n stable > /dev/null
          npm install -g xunit-viewer > /dev/null
          xunit-viewer --results=$TEST_RESULTS_XML --output=$TEST_RESULTS_HTML --title='OpenLab Test Result'
        executable: /bin/bash
        chdir: '{{ zuul.project.src_dir }}'
      environment: '{{ zuul | zuul_legacy_vars }}'
